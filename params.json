{
  "name": "Community-platform",
  "tagline": "DuckDuckGo Community Platform",
  "body": "# DuckDuckGo - Community Platform\r\n\r\nThis is the source code for the DuckDuckGo Community Platform at [duck.co](https://duck.co/)\r\n\r\n## Requirements / Installation\r\n\r\nThe DuckDuckGo Community Platform is built on [Perl](http://www.perl.org/),\r\n[Catalyst](https://metacpan.org/pod/Catalyst),\r\n[DBIx::Class](https://metacpan.org/pod/DBIx::Class),\r\n[Text::Xslate](https://metacpan.org/pod/Text::Xslate) and\r\n[Dancer2](https://metacpan.org/pod/Dancer2).\r\n\r\nRequires perl 5.16.3 (or higher) and:\r\n\r\n- cpanm ([local::lib](https://metacpan.org/pod/local::lib) and/or [perlbrew](http://perlbrew.pl/) recommended)\r\n- gcc toolchain (gcc, make, lib headers)\r\n- git\r\n- libcurl\r\n- imagemagick\r\n- postgresql (recommended, though you may get away with mysql or sqlite for now)\r\n\r\nTo install these on Debian / Ubuntu:\r\n\r\n```\r\n  apt-get install cpanm build-essential libgd2-xpm-dev libssl-dev git libcurl4-gnutls-dev libxml2-dev imagemagick perl-doc postgresql libpq-dev\r\n```\r\n\r\nTo proceed with installation, you will also need [Dist::Zilla](https://metacpan.org/pod/Dist::Zilla)\r\n\r\n```\r\n  cpanm -i Dist::Zilla\r\n```\r\n\r\nTo install community-platform's Perl dependencies, go to its directory and\r\nrun:\r\n\r\n```\r\n  dzil authordeps --missing | cpanm\r\n  dzil listdeps --missing | grep -v abstract | cpanm\r\n```\r\n\r\nThis will take some time. You can add `--notest` to the cpanm command to speed\r\nthings up, but this may result in fires later.\r\n\r\n## Test Data\r\n\r\nBefore running the dev server, we need a database schema.\r\n\r\nThe default is to use SQLite if no DSN configuration environment\r\nvariables are found, e.g.\r\n\r\n```\r\n  export DDGC_DB_DSN='dbi:Pg:database=ddgc';\r\n  export DDGC_DB_USER='ddgc';\r\n  export DDGC_DB_PASSWORD='yourdbpass';\r\n```\r\n\r\nTo run the dev environment deployment script, your postgres user requires\r\nthe following permissions:\r\n\r\n```\r\n  ALTER USER ddgc CREATEDB;\r\n  ALTER USER ddgc LOGIN;\r\n```\r\n\r\nThis script deploys the schema and populates it with a test / dev data set:\r\n\r\n```\r\n  script/ddgc_deploy_dev.pl\r\n```\r\n\r\nYou can also roll over any existing schema with the `--kill` switch:\r\n\r\n```\r\n  script/ddgc_deploy_dev.pl --kill\r\n```\r\n\r\nFor the flags to work, you need to generate their sprites. This\r\nprocess has to be repeated everytime the country flags are changed.\r\n\r\n```\r\n  script/ddgc_generate_flag_sprites.pl\r\n```\r\n\r\nCommunity platform's generated static files, media uploads, caches, duckpan\r\npackages etc. live in `$HOME/ddgc/`\r\n\r\n## Development\r\n\r\nTo launch the development web server:\r\n\r\n```\r\nscript/ddgc_dev_server.sh\r\n```\r\n\r\nThis, by default, launches a plack server bound to port 5001 with DBIC and\r\nCatalyst console debugging enabled with Plack debug panels in rendered output.\r\n\r\nIt watches the `lib/` directory and restarts if there are any changes written.\r\nIt supports the following options:\r\n\r\n- -p <PORT> - Set port to bind to\r\n- -m - Use a debug mailer on localhost:1025 (python -m smtpd -n -c DebuggingServer localhost:1025)\r\n- -n - Don't render Plack debug panels (useful for frontend work)\r\n\r\nFront end elements (js, css...) in `src/` are managed by node.js / grunt.\r\n\r\nTo launch a task to rebuild static files when they change, use\r\n\r\n`grunt watch`\r\n\r\n### User Accounts\r\n\r\nThe following accounts are created by `ddgc_deploy_dev.pl`:\r\n\r\n- **testone** An admin, who is native German but also speaks English.\r\n\r\n- **testtwo** A normal user who speaks Spanish with public profile.\r\n\r\n- **testthree** A translation manager who speaks English, Arabic, and German.\r\n\r\n- **testfour** An admin, who speaks German, Spanish, and English.\r\n\r\n- **testfive** A normal user without public profile, who speaks Russian and\r\n   English.\r\n\r\n- Additionally there are also **test1** to **test40** all without any setup.\r\n\r\nAny random password will suffice, as a separate service is used to provide\r\nauthentication in production.\r\n\r\n## License\r\n\r\nThis software is licensed under Perl 5 dual license: either GPLv1 or later, or, at users' choice, Artistic 1.0.\r\nWe welcome contributions to this software under the same licensing terms.\r\n\r\n## Third party credits\r\n\r\nThe project is built using other software packages and creative content:\r\n\r\n- SCEditor, [MIT license](http://www.opensource.org/licenses/MIT)\r\n- jQuery JavaScript Library v1.9.1, [MIT license](http://www.opensource.org/licenses/MIT)\r\n- aToolTip jQuery plugin, [CC-BY 3.0 Unported license](http://creativecommons.org/licenses/by/3.0)\t\t\t\r\n- Select2, [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0) or [GPL v2](http://www.gnu.org/licenses/gpl-2.0.html)\r\n- handlebars v1.3.0, [MIT license](http://www.opensource.org/licenses/MIT)\r\n- HTML5shiv, dual license, [MIT](http://www.opensource.org/licenses/MIT) or [GPL v2](http://www.gnu.org/licenses/gpl-2.0.html)\r\n- jQuery Iframe Transport, part of jQuery-File-Upload jQuery plugin, [MIT license](http://www.opensource.org/licenses/MIT)\r\n- Dropzone, [MIT license](http://www.opensource.org/licenses/MIT)\r\n- ContentLoaded, [MIT license](http://www.opensource.org/licenses/MIT)\r\n- addPlaceholder jQuery plugin, code made available on [author's blog](http://iliadraznin.com/2011/02/jquery-placeholder-plugin/)\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}